"""
Main entry point ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI VTuber
"""
import asyncio
import logging
import os
import sys
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° src directory ‡πÄ‡∏Ç‡πâ‡∏≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

from core.config import Config
from core.scheduler import PriorityScheduler
from core.types import IncomingMessage, MessageSource
from personality.personality import PersonalityManager
from llm.chatgpt_client import ChatGPTClient
from adapters.discord_bot import DiscordBot
from adapters.youtube_live import YouTubeLiveAdapter
from adapters.tts.f5_tts_thai import F5TTSThai
from adapters.vts.vts_client import VTSClient
from adapters.vts.hotkeys import HotkeyManager, Emotion

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)-8s %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


class AIVTuber:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI VTuber"""
    
    def __init__(self):
        self.config = Config()
        self.scheduler = PriorityScheduler()
        self.personality = PersonalityManager()
        self.llm_client = ChatGPTClient(
            api_key=self.config.OPENAI_API_KEY,
            model=self.config.LLM_MODEL
        )
        self.tts = None
        self.vts_client = None
        self.hotkey_manager = None
        self.discord_bot = None
        self.youtube = None
        
        # Task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö process messages
        self.processing_task = None
        self.safe_motion_task = None
        self.running = False
    
    async def initialize(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        logger.info("="*60)
        logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI VTuber")
        logger.info("="*60)
        
        # 1. ‡πÇ‡∏´‡∏•‡∏î TTS
        try:
            logger.info("\nüì¢ [1/5] ‡πÇ‡∏´‡∏•‡∏î TTS Engine...")
            self.tts = F5TTSThai(
                reference_wav=self.config.TTS_REFERENCE_WAV,
                reference_text=self.config.TTS_REFERENCE_TEXT
            )
            logger.info("‚úÖ ‡πÇ‡∏´‡∏•‡∏î TTS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î TTS: {e}")
            raise
        
        # 2. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ VTube Studio
        try:
            logger.info("\nüé≠ [2/5] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ VTube Studio...")
            self.vts_client = VTSClient(
                plugin_name=self.config.VTS_PLUGIN_NAME,
                plugin_developer="VIoneyy",
                host=self.config.VTS_HOST,
                port=self.config.VTS_PORT,
                config=self.config  # ‡∏™‡πà‡∏á config ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
            )
            
            if await self.vts_client.connect():
                logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ VTS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á HotkeyManager
                self.hotkey_manager = HotkeyManager(self.vts_client)
                self.hotkey_manager.configure_from_env(self.config)
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏° Safe Motion Mode (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
                if getattr(self.config, "SAFE_MOTION_MODE", False):
                    interval = getattr(self.config, "SAFE_HOTKEY_INTERVAL", 6.0)
                    logger.info(f"üîí ‡πÄ‡∏£‡∏¥‡πà‡∏° Safe Motion Mode (interval={interval}s)")
                    self.safe_motion_task = asyncio.create_task(
                        self.hotkey_manager.safe_motion_mode(interval)
                    )
                else:
                    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° (Parameter injection)
                    await self.vts_client.start_random_motion()
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏° keyboard listener (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
                if getattr(self.config, "ENABLE_GLOBAL_HOTKEYS", False):
                    await self.hotkey_manager.start_emotion_keyboard_listener()
                
            else:
                logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ VTS - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
                self.vts_client = None
                self.hotkey_manager = None
                
        except Exception as e:
            logger.error(f"‚ùå VTS Error: {e}")
            self.vts_client = None
            self.hotkey_manager = None
        
        # 3. ‡πÄ‡∏£‡∏¥‡πà‡∏° Discord Bot
        logger.info("\nüí¨ [3/5] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Discord Bot...")
        if self.config.DISCORD_BOT_TOKEN:
            try:
                self.discord_bot = DiscordBot(
                    token=self.config.DISCORD_BOT_TOKEN,
                    scheduler=self.scheduler
                )
                # ‡πÄ‡∏£‡∏¥‡πà‡∏° bot ‡πÅ‡∏ö‡∏ö background task
                asyncio.create_task(self.discord_bot.start())
                logger.info("‚úÖ Discord Bot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            except Exception as e:
                logger.error(f"‚ùå Discord Bot Error: {e}")
        else:
            logger.info("‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏° Discord: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DISCORD_BOT_TOKEN")
        
        # 4. ‡πÄ‡∏£‡∏¥‡πà‡∏° YouTube Live
        logger.info("\nüì∫ [4/5] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô YouTube Live...")
        if self.config.YOUTUBE_STREAM_ID:
            try:
                self.youtube = YouTubeLiveAdapter(
                    stream_id=self.config.YOUTUBE_STREAM_ID,
                    scheduler=self.scheduler
                )
                asyncio.create_task(self.youtube.start())
                logger.info("‚úÖ YouTube Live ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            except Exception as e:
                logger.error(f"‚ùå YouTube Error: {e}")
        else:
            logger.info("‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏° YouTube: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ YOUTUBE_STREAM_ID")
        
        # 5. ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
        logger.info("\nüéâ [5/5] ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô!")
        logger.info("="*60 + "\n")
    
    async def process_messages(self):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å scheduler"""
        logger.info("üìù ‡πÄ‡∏£‡∏¥‡πà‡∏° message processing loop...\n")
        
        while self.running:
            try:
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å queue
                message = await self.scheduler.get_next_message()
                
                if message:
                    await self._handle_message(message)
                else:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
                    await asyncio.sleep(0.5)
                    
            except Exception as e:
                logger.error(f"‚ùå Error processing message: {e}", exc_info=True)
                await asyncio.sleep(1)
    
    async def _handle_message(self, message: IncomingMessage):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        try:
            logger.info("="*60)
            logger.info(f"üí¨ [{message.source.value}] {message.author}:")
            logger.info(f"   {message.content[:100]}{'...' if len(message.content) > 100 else ''}")
            
            # 1. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LLM
            system_prompt = self.personality.get_system_prompt()
            response = await self.llm_client.chat(
                user_message=message.content,
                system_prompt=system_prompt,
                username=message.author
            )
            
            if not response:
                logger.warning("‚ö†Ô∏è LLM ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤")
                return
            
            logger.info(f"ü§ñ AI: {response[:100]}{'...' if len(response) > 100 else ''}")
            
            # 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏î hotkey (‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏π‡∏î)
            if self.hotkey_manager:
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                emotion = await self.hotkey_manager.analyze_emotion(response)
                
                # ‡∏Å‡∏î hotkey ‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
                # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ
                if len(response) > 100 or "?" in message.content:
                    await self.hotkey_manager.trigger_emotion(
                        Emotion.THINKING, 
                        probability=0.7
                    )
                else:
                    # ‡πÉ‡∏ä‡πâ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ
                    await self.hotkey_manager.trigger_emotion(
                        emotion,
                        probability=0.5
                    )
            
            # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡∏î‡πâ‡∏ß‡∏¢ TTS
            try:
                audio_path = await self.tts.synthesize(response)
                
                if audio_path and os.path.exists(audio_path):
                    logger.info(f"üîä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {audio_path}")
                    
                    # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡πà‡∏≤‡∏ô Discord (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    if self.discord_bot and message.source == MessageSource.DISCORD_VOICE:
                        await self.discord_bot.play_audio(audio_path)
                    
            except Exception as e:
                logger.error(f"‚ùå TTS Error: {e}")
            
            # 4. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô text)
            if message.source == MessageSource.DISCORD_TEXT:
                if self.discord_bot:
                    # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ
                    if len(response) > 2000:
                        chunks = [response[i:i+2000] for i in range(0, len(response), 2000)]
                        for chunk in chunks:
                            await self.discord_bot.send_message(message.channel_id, chunk)
                    else:
                        await self.discord_bot.send_message(message.channel_id, response)
            
            logger.info("="*60 + "\n")
            
        except Exception as e:
            logger.error(f"‚ùå Error handling message: {e}", exc_info=True)
    
    async def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö"""
        self.running = True
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        await self.initialize()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° processing loop
        self.processing_task = asyncio.create_task(self.process_messages())
        
        # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î
        try:
            await self.processing_task
        except asyncio.CancelledError:
            pass
    
    async def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        logger.info("\n" + "="*60)
        logger.info("üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        logger.info("="*60)
        
        self.running = False
        
        # ‡∏´‡∏¢‡∏∏‡∏î processing task
        if self.processing_task:
            self.processing_task.cancel()
            try:
                await self.processing_task
            except asyncio.CancelledError:
                pass
        
        # ‡∏´‡∏¢‡∏∏‡∏î safe motion task
        if self.safe_motion_task:
            self.safe_motion_task.cancel()
            try:
                await self.safe_motion_task
            except asyncio.CancelledError:
                pass
        
        # ‡∏õ‡∏¥‡∏î keyboard listener
        if self.hotkey_manager:
            self.hotkey_manager.stop_emotion_keyboard_listener()
        
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ VTS
        if self.vts_client:
            await self.vts_client.disconnect()
        
        # ‡∏õ‡∏¥‡∏î Discord bot
        if self.discord_bot:
            await self.discord_bot.close()
        
        # ‡∏õ‡∏¥‡∏î YouTube
        if self.youtube:
            await self.youtube.stop()
        
        logger.info("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        logger.info("="*60 + "\n")


async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    vtuber = AIVTuber()
    
    try:
        await vtuber.start()
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}", exc_info=True)
    finally:
        await vtuber.stop()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass