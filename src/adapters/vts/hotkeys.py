"""
VTube Studio Hotkeys Manager
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ emotion hotkeys ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
"""
import asyncio
import logging
import random
import re
from typing import Optional, Dict, List
from enum import Enum

logger = logging.getLogger(__name__)


class Emotion(Enum):
    """‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö"""
    NEUTRAL = "neutral"
    HAPPY = "happy"
    SAD = "sad"
    ANGRY = "angry"
    SURPRISED = "surprised"
    CALM = "calm"
    THINKING = "thinking"


class HotkeyManager:
    """
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ emotion hotkeys ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    """
    
    def __init__(self, vts_client):
        """
        Args:
            vts_client: instance ‡∏Ç‡∏≠‡∏á VTSClient
        """
        self.vts_client = vts_client
        
        # ‡πÅ‡∏°‡∏õ emotion ‡∏Å‡∏±‡∏ö hotkey names (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ)
        # ‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏Ñ‡πà 3 hotkeys: thinking (F1), happy (F2), sad (F3)
        self.emotion_hotkeys: Dict[Emotion, str] = {
            Emotion.THINKING: "thinking",   # F1
            Emotion.HAPPY: "happy",         # F2
            Emotion.SAD: "sad",             # F3
            Emotion.NEUTRAL: "thinking",    # ‡πÉ‡∏ä‡πâ thinking ‡πÅ‡∏ó‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ neutral)
            # ‡πÑ‡∏°‡πà‡∏°‡∏µ hotkeys ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Hiyori_A
            # Emotion.ANGRY: None,
            # Emotion.SURPRISED: None,
            # Emotion.CALM: None,
        }
        
        # ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
        self.emotion_keywords = {
            Emotion.HAPPY: [
                # ‡πÑ‡∏ó‡∏¢
                "‡∏™‡∏ô‡∏∏‡∏Å", "‡∏î‡∏µ‡πÉ‡∏à", "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ", "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°", "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î", "‡πÄ‡∏à‡πã‡∏á", "‡∏ß‡∏≤‡∏ß", "‡∏ä‡∏≠‡∏ö", "‡∏£‡∏±‡∏Å",
                "555", "5555", "‡∏Æ‡∏≤", "‡∏Æ‡πà‡∏≤", "‡∏´‡∏¥‡∏´‡∏¥", "‡πÇ‡∏≠‡πâ‡πÇ‡∏´", "‡∏ß‡πâ‡∏≤‡∏ß", "‡∏î‡∏µ", "‡πÄ‡∏û‡∏£‡∏≤‡∏∞",
                "‡∏™‡∏ß‡∏¢", "‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å", "‡∏ô‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏°", "‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à", "‡∏ä‡∏∑‡πà‡∏ô‡πÉ‡∏à",
                # ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
                "happy", "joy", "great", "love", "amazing", "awesome", "cool", "nice",
                "haha", "lol", "yay", "wow", "excellent", "wonderful", "fantastic", "good"
            ],
            Emotion.SAD: [
                # ‡πÑ‡∏ó‡∏¢
                "‡πÄ‡∏®‡∏£‡πâ‡∏≤", "‡πÄ‡∏™‡∏µ‡∏¢", "‡∏≠‡∏≤‡∏à‡∏≤‡∏£", "‡πÅ‡∏¢‡πà", "‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á", "‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡∏≤‡∏¢", "‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ", "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à",
                "‡πÄ‡∏ã‡πá‡∏á", "‡∏´‡∏î‡∏´‡∏π‡πà", "‡∏ó‡πâ‡∏≠", "‡∏™‡∏•‡∏î", "‡πÄ‡∏´‡∏á‡∏≤", "‡πÇ‡∏î‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß", "‡∏ó‡∏∏‡∏Å‡∏Ç‡πå", "‡∏•‡∏≥‡∏ö‡∏≤‡∏Å",
                # ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
                "sad", "sorry", "disappointed", "depressed", "unhappy", "cry", "tears",
                "unfortunate", "poor", "pity", "regret", "lonely", "hurt"
            ],
            Emotion.THINKING: [
                # ‡πÑ‡∏ó‡∏¢
                "‡∏Ñ‡∏¥‡∏î", "‡∏ô‡∏∂‡∏Å", "‡∏™‡∏á‡∏™‡∏±‡∏¢", "‡∏≠‡∏∑‡∏°", "‡πÄ‡∏≠‡πà‡∏≠", "‡∏≠‡∏∞‡πÑ‡∏£", "‡πÑ‡∏´‡∏°", "‡∏´‡∏£‡∏∑‡∏≠", "‡πÅ‡∏•‡πâ‡∏ß",
                "‡∏ó‡∏≥‡πÑ‡∏°", "‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£", "‡∏¢‡∏±‡∏á‡πÑ‡∏á", "‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£", "‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤", "‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤",
                "‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", "‡∏ö‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
                # ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
                "think", "wonder", "hmm", "uh", "um", "what", "how", "why", "question",
                "maybe", "perhaps", "?", "explain", "tell me", "suggest"
            ],
            Emotion.NEUTRAL: [
                # ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à
                "‡πÇ‡∏≠‡πÄ‡∏Ñ", "‡πÑ‡∏î‡πâ", "‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡πà‡∏∞", "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à", "‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß",
                "okay", "ok", "alright", "sure", "fine", "understood"
            ]
        }
        
        # Global keyboard hotkeys (F1, F2, F3)
        self.global_hotkeys_enabled = False
        self.keyboard_listener_task: Optional[asyncio.Task] = None
    
    def configure_from_env(self, config):
        """
        ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å environment variables
        
        Args:
            config: Config object
        """
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ hotkey names ‡∏à‡∏≤‡∏Å config
        self.emotion_hotkeys[Emotion.NEUTRAL] = getattr(config, "VTS_HK_NEUTRAL", "Neutral")
        self.emotion_hotkeys[Emotion.HAPPY] = getattr(config, "VTS_HK_HAPPY", "Happy")
        self.emotion_hotkeys[Emotion.SAD] = getattr(config, "VTS_HK_SAD", "Sad")
        self.emotion_hotkeys[Emotion.ANGRY] = getattr(config, "VTS_HK_ANGRY", "Angry")
        self.emotion_hotkeys[Emotion.SURPRISED] = getattr(config, "VTS_HK_SURPRISED", "Surprised")
        self.emotion_hotkeys[Emotion.CALM] = getattr(config, "VTS_HK_CALM", "Calm")
        self.emotion_hotkeys[Emotion.THINKING] = getattr(config, "VTS_HK_THINKING", "Thinking")
        
        # Global hotkeys
        self.global_hotkeys_enabled = getattr(config, "ENABLE_GLOBAL_HOTKEYS", False)
        
        logger.info("[Hotkeys] ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        for emotion, hotkey_name in self.emotion_hotkeys.items():
            logger.debug(f"  {emotion.value} -> {hotkey_name}")
    
    async def analyze_emotion(self, text: str) -> Emotion:
        """
        ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        
        Args:
            text: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            
        Returns:
            Emotion ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
        """
        text_lower = text.lower()
        
        # ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
        scores = {emotion: 0 for emotion in Emotion}
        
        for emotion, keywords in self.emotion_keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    scores[emotion] += 1
        
        # ‡∏´‡∏≤‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        max_score = max(scores.values())
        
        if max_score > 0:
            # ‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î
            top_emotions = [e for e, s in scores.items() if s == max_score]
            return random.choice(top_emotions)
        else:
            # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            # ‡πÉ‡∏ä‡πâ heuristics ‡∏≠‡∏∑‡πà‡∏ô
            
            # ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° -> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î
            if "?" in text or "‡πÑ‡∏´‡∏°" in text_lower:
                return Emotion.THINKING
            
            # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß -> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î/‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            if len(text) > 100:
                return Emotion.NEUTRAL if random.random() < 0.7 else Emotion.THINKING
            
            # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ -> ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            return Emotion.NEUTRAL
    
    async def trigger_emotion(
        self, 
        emotion: Optional[Emotion] = None, 
        text: str = "",
        auto_analyze: bool = True,
        probability: float = 0.5
    ) -> bool:
        """
        ‡∏Å‡∏î emotion hotkey
        
        Args:
            emotion: ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å text)
            text: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
            auto_analyze: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å text
            probability: ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏î hotkey (0-1)
            
        Returns:
            True ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î hotkey ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        """
        # ‡∏™‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if random.random() > probability:
            logger.debug("[Hotkeys] ‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏Å‡∏î hotkey ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ")
            return False
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
        if emotion is None and auto_analyze and text:
            emotion = await self.analyze_emotion(text)
        
        # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ emotion ‡πÉ‡∏ä‡πâ neutral
        if emotion is None:
            emotion = Emotion.NEUTRAL
        
        # ‡∏î‡∏∂‡∏á hotkey name
        hotkey_name = self.emotion_hotkeys.get(emotion)
        
        if not hotkey_name:
            logger.warning(f"[Hotkeys] ‡πÑ‡∏°‡πà‡∏û‡∏ö hotkey ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {emotion.value}")
            return False
        
        # ‡∏Å‡∏î hotkey
        try:
            await self.vts_client.trigger_hotkey(hotkey_name)
            logger.info(f"üé≠ [Hotkeys] ‡πÉ‡∏ä‡πâ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: {emotion.value} ({hotkey_name})")
            return True
        except Exception as e:
            logger.error(f"[Hotkeys] Error triggering {emotion.value}: {e}")
            return False
    
    async def trigger_random_emotion(self, exclude: List[Emotion] = None) -> bool:
        """
        ‡∏Å‡∏î emotion hotkey ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
        
        Args:
            exclude: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°
            
        Returns:
            True ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î hotkey ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        """
        emotions = list(Emotion)
        
        if exclude:
            emotions = [e for e in emotions if e not in exclude]
        
        if not emotions:
            return False
        
        emotion = random.choice(emotions)
        return await self.trigger_emotion(emotion, probability=1.0)
    
    async def start_emotion_keyboard_listener(self):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏° listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö global hotkeys (F1, F2, F3)
        ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠
        """
        if not self.global_hotkeys_enabled:
            logger.info("[Hotkeys] Global hotkeys ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
        
        try:
            import keyboard
            
            logger.info("[Hotkeys] üéπ ‡πÄ‡∏£‡∏¥‡πà‡∏° emotion keyboard listener")
            logger.info("  F1 = Neutral")
            logger.info("  F2 = Happy")
            logger.info("  F3 = Sad")
            
            # ‡∏ú‡∏π‡∏Å hotkeys
            keyboard.add_hotkey('f1', lambda: asyncio.create_task(
                self.trigger_emotion(Emotion.NEUTRAL, probability=1.0)
            ))
            keyboard.add_hotkey('f2', lambda: asyncio.create_task(
                self.trigger_emotion(Emotion.HAPPY, probability=1.0)
            ))
            keyboard.add_hotkey('f3', lambda: asyncio.create_task(
                self.trigger_emotion(Emotion.SAD, probability=1.0)
            ))
            
        except ImportError:
            logger.warning("[Hotkeys] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö 'keyboard' library - ‡∏Ç‡πâ‡∏≤‡∏° global hotkeys")
            logger.info("  ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢: pip install keyboard")
        except Exception as e:
            logger.error(f"[Hotkeys] Error setting up keyboard listener: {e}")
    
    def stop_emotion_keyboard_listener(self):
        """‡∏´‡∏¢‡∏∏‡∏î keyboard listener"""
        try:
            import keyboard
            keyboard.unhook_all()
            logger.info("[Hotkeys] üõë ‡∏´‡∏¢‡∏∏‡∏î keyboard listener")
        except:
            pass
    
    async def safe_motion_mode(self, interval: float = 6.0):
        """
        ‡πÇ‡∏´‡∏°‡∏î Safe Motion - ‡∏Å‡∏î hotkey ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞
        ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ inject parameters (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏ß‡πà‡∏≤)
        
        Args:
            interval: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏î hotkey (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        """
        logger.info(f"[Hotkeys] üîí ‡πÄ‡∏£‡∏¥‡πà‡∏° Safe Motion Mode (interval={interval}s)")
        
        try:
            while True:
                # ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏î hotkey
                await self.trigger_random_emotion(exclude=[Emotion.ANGRY])
                
                # ‡∏£‡∏≠
                await asyncio.sleep(interval + random.uniform(-1, 1))
                
        except asyncio.CancelledError:
            logger.info("[Hotkeys] Safe Motion Mode ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
        except Exception as e:
            logger.error(f"[Hotkeys] Safe Motion Mode error: {e}")


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async def test_hotkey_manager():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö HotkeyManager"""
    from .vts_client import VTSClient
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á VTS client
    vts = VTSClient()
    
    if not await vts.connect():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ VTS")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á HotkeyManager
    hotkeys = HotkeyManager(vts)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    test_texts = [
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞",  # -> Happy
        "‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ ‡∏ó‡∏≥‡πÑ‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ",  # -> Sad
        "‡∏≠‡∏∑‡∏°... ‡πÉ‡∏´‡πâ‡∏Ñ‡∏¥‡∏î‡∏î‡∏π‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞",  # -> Thinking
        "‡πÇ‡∏Å‡∏£‡∏ò‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢! ‡∏ó‡∏≥‡πÑ‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ",  # -> Angry
        "‡∏ß‡πâ‡∏≤‡∏ß! ‡πÄ‡∏à‡πã‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢!",  # -> Surprised/Happy
    ]
    
    print("\nüìù ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå:")
    print("="*60)
    
    for text in test_texts:
        emotion = await hotkeys.analyze_emotion(text)
        print(f"{text[:40]:<40} -> {emotion.value}")
    
    print("\nüé≠ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏î hotkeys:")
    print("="*60)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏î hotkey ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô
    for emotion in [Emotion.NEUTRAL, Emotion.HAPPY, Emotion.SAD]:
        await hotkeys.trigger_emotion(emotion, probability=1.0)
        await asyncio.sleep(2)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    print("\nü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö auto-analyze:")
    for text in test_texts[:3]:
        print(f"  Text: {text[:40]}")
        await hotkeys.trigger_emotion(text=text, auto_analyze=True, probability=1.0)
        await asyncio.sleep(3)
    
    await vts.disconnect()
    print("\n‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")


if __name__ == "__main__":
    asyncio.run(test_hotkey_manager())